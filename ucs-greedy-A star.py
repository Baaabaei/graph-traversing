# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tIuQjhz1ohemzST0EvaSG_wOI7L2u8Cx
"""

from collections import deque

graph = {
    'A': {'B': 25, 'C': 3, 'D': 10},
    'B': {'E': 12, 'C': 20},
    'C': {'D': 42},
    'D': {'E': 15, 'F': 15},
    'E': {'F': 5},
    'F': {}
}

heuristic = {
    'A': 8,
    'B': 15,
    'C': 9,
    'D': 15,
    'E': 5,
    'F': 0
}

def ucs(start):
    frontier = deque([(0, start)])
    explored = set()
    path = {}

    while frontier:
        cost, node = frontier.popleft()

        if node not in explored:
            explored.add(node)
            path[node] = cost

            if node == 'F':
                return path

            for neighbor, weight in graph[node].items():
                if neighbor not in explored:
                    frontier.append((cost + weight, neighbor))

    return path

def greedy(start):
    frontier = deque([(heuristic[start], start)])
    explored = set()
    path = {}

    while frontier:
        _, node = frontier.popleft()

        if node not in explored:
            explored.add(node)
            path[node] = None

            if node == 'F':
                return path

            for neighbor in graph[node]:
                if neighbor not in explored:
                    frontier.append((heuristic[neighbor], neighbor))

    return path

def astar(start):
    frontier = deque([(heuristic[start], 0, start)])
    explored = set()
    path = {}

    while frontier:
        f, cost, node = frontier.popleft()

        if node not in explored:
            explored.add(node)
            path[node] = cost

            if node == 'F':
                return path

            for neighbor, weight in graph[node].items():
                if neighbor not in explored:
                    g = cost + weight
                    f = g + heuristic[neighbor]
                    frontier.append((f, g, neighbor))

    return path

print("UCS:")
ucs_path = ucs('A')
for node, cost in ucs_path.items():
    print(f"{node}: {cost}")

print("\nGreedy:")
greedy_path = greedy('A')
for node in greedy_path:
    print(node)

print("\nA*:")
astar_path = astar('A')
for node, cost in astar_path.items():
    print(f"{node}: {cost}")

