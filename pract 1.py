# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tIuQjhz1ohemzST0EvaSG_wOI7L2u8Cx
"""

from math import inf

def tsp_search(graph):
    # Initialize the cost matrix
    n = len(graph)
    cost = [[inf for _ in range(n)] for _ in range(n)]

    # Set cost for existing edges
    for i in range(n):
        for j in range(n):
            if graph[i][j] != 0:
                cost[i][j] = graph[i][j]

    # Find the minimum cost path
    path = []
    for i in range(n):
        min_cost = inf
        min_path = []
        for j in range(n):
            if j != i and cost[i][j] < min_cost:
                min_cost = cost[i][j]
                min_path = [i, j]
        path.extend(min_path)

    # Remove duplicates and add start/end point
    path = list(dict.fromkeys(path))
    path.append(path[0])

    return path

# Example usage
graph = [
    [0, 5, 0, 3],
    [0, 0, 2, 0],
    [0, 1, 0, 4],
    [0, 0, 6, 0]
]

result = tsp_search(graph)
print(result)

